<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CCExtractor's home page on CCExtractor</title><link>https://ccextractor.org/</link><description>Recent content in CCExtractor's home page on CCExtractor</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://ccextractor.org/index.xml" rel="self" type="application/rss+xml"/><item><title>CCExtractor's home page</title><link>https://ccextractor.org/docs/cchome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/docs/cchome/</guid><description>User documentation and files How to chat with the team (for support, to join us, for GSoC, or anything else)
What's CCExtractor? (the software, not the organization)
About CCExtractor Development (the organization, not the software)
Downloads
Changelog
Using the command line tool
Using the Windows GUI
Real time demo - Currently down, our primary source of data is moving to a new office and their infrastructure is not yet available.</description></item><item><title>Google Summer of Code (GSoC) 2021 ideas page</title><link>https://ccextractor.org/docs/ideas_page_for_summer_of_code_2021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/docs/ideas_page_for_summer_of_code_2021/</guid><description>Welcome to our ideas page. It's great you want to start early. Please join us in our slack channel! (we'll leave as an exercise to you to find it --- it's on our website).
This is an &amp;quot;new way of doing things year&amp;quot;. GSoC projects are now supposed to take around 175 hours and we've adapted our ideas to reflect that. If you think any idea is too long or too short please let us know - we still need to fine tune this!</description></item><item><title>Google Summer of Code (GSoC) 2021 ideas page</title><link>https://ccextractor.org/public/gsoc/ideas_page_for_summer_of_code_2021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/ideas_page_for_summer_of_code_2021/</guid><description>Welcome to our ideas page. It's great you want to start early. Please join us in our slack channel! (we'll leave as an exercise to you to find it --- it's on our website).
This is an &amp;quot;new way of doing things year&amp;quot;. GSoC projects are now supposed to take around 175 hours and we've adapted our ideas to reflect that. If you think any idea is too long or too short please let us know - we still need to fine tune this!</description></item><item><title>What's CCExtractor</title><link>https://ccextractor.org/public/general/whatsccextractor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/whatsccextractor/</guid><description>A tool that analyzes video files and produces independent subtitle files from the closed captions data. CCExtractor is portable, small, and very fast. It works in Linux, Windows, and OSX.
What kind of closed captions does CCExtractor support? Almost all of them:
American TV captions (CEA-608 is well supported, and CEA-708 is starting to look good) European Teletext European DVB Brazilian ISBD DVD MXF Missing:
DTMB (Chinese) How easy is it to use CCExtractor?</description></item><item><title/><link>https://ccextractor.org/playground/anshul/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/playground/anshul/</guid><description>Anshul Maheshwari at GSOC 15</description></item><item><title/><link>https://ccextractor.org/playground/playground/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/playground/playground/</guid><description>PlayGround</description></item><item><title/><link>https://ccextractor.org/private/gsoc/slack_a_communications_tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/private/gsoc/slack_a_communications_tools/</guid><description>Slack Slack it's a very convenient tool for team work. It comes with a number of useful features, but the one we should be using most it's the online chat. It saves logs which can be read at any time (so you don't have to be online all the time not to miss things), desktop notifications and Android/iOS apps. It can also be integrated with a number of tools such as GitHub (to notify in channel when something has been pushed).</description></item><item><title/><link>https://ccextractor.org/public/codein/google_code-in_2018_task_list_sample/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/codein/google_code-in_2018_task_list_sample/</guid><description>Preliminary task page This year we are try new things and see how it works out.
On top of design and coding small tools and minor features, we're going to have two more tracks: Google Assistant and IA.
Google Assistant The Google Assistant one is perfect because anyone can create a reasonably useful action in 2-3 hours, without any coding, so it would fall into product design rather than coding. But then, it's easy to use a well thought design to extend it with coding, cloud functions and so on.</description></item><item><title/><link>https://ccextractor.org/public/codein/welcome_2017/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/codein/welcome_2017/</guid><description>__Google Code-In 2017__
We're happy to see you here :-) (come here often, we will update this page until the end of Code-In).
We've been accepted to Code-In 2017, along another 24 amazing organizations. Last year was fantastic by all possibly metrics and we're really excited about being invited again.
Most likely you came here so see what kind of tasks we have. Well, we cannot show you the actual list as they will be published in Code-in's website when the time comes, and it's important that no one has an unfair advantage, but we can tell you this:</description></item><item><title/><link>https://ccextractor.org/public/general/http/sourceforge.net_donate_index.php/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/http/sourceforge.net_donate_index.php/</guid><description>If you like CCExtractor but can't submit code patches, or video samples, you can contribute a bit by inviting the developers to a beer which is just as fine as all other kinds of support.
Donate via sourceforge</description></item><item><title/><link>https://ccextractor.org/public/general/tess_build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/tess_build/</guid><description>Building Tesseract in Windows Warning - the development of the current version of Tesseract and cppan is very active, and this tutorial may be obsolete. This documentation is working at 21.12.2016
Tesseract is an optical character recognition engine for various operating systems. This library is currently used in CCExtractor. At the moment, the alpha version 4.0.0 is available from current master https://github.com/tesseract-ocr/tesseract
Historically, build it for Windows is complex and unclear.</description></item><item><title/><link>https://ccextractor.org/public/general/vagrant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/vagrant/</guid><description>Using Vagrant What is Vagrant? Vagrant provides easy to configure, reproducible, and portable work environments built on top of industry-standard technology and controlled by a single consistent workflow to help maximize the productivity and flexibility of you and your team. Vagrant will isolate dependencies and their configuration within a single disposable, consistent environment, without sacrificing any of the tools you are used to working with (editors, browsers, debuggers, etc.). Once you or someone else creates a single Vagrantfile, you just need to %%vagrant up%% and everything is installed and configured for you to work.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/amazon_aws_deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/amazon_aws_deployment/</guid><description>Amazon AWS deployment =
This is a guide for deploying, configuring and administrating CC Repository on Amazon Web Service.
Server Architecture First, let's consider server architecture. I suggest to use the approach based only on EC2, RDS and ELB services provided by Amazon.
Server architecture includes the following components:
MySQL server. This server is based on Amazon RDS instance and is used for storing MySQL database and accessing it from other servers NFS server.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/anshul_maheshwari_gsoc15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/anshul_maheshwari_gsoc15/</guid><description>======= GSOC 2015 Documentation =======
Technical Documentation Transport Stream Data structure in Transport Stream made for Multiprogram.
Decoder In CCextractor we have single Decoder Initialization function, struct lib_cc_decode* init_cc_decode (struct ccx_decoders_common_settings_t *setting) where settings of decoder are passed in its parameter
struct ccx_decoders_common_settings_t {
LLONG subs_delay; // ms to delay (or advance) subs
enum ccx_output_format output_format; // What kind of output format should be used?
int fix_padding; // Replace 0000 with 8080 in HDTV (needed for some cards)</description></item><item><title/><link>https://ccextractor.org/public/gsoc/configuration_options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/configuration_options/</guid><description>Configuration options This document describes repository application and website configuration options
Repository application config There are 3 ways to configure server application: config files, environment variables and command line arguments. Options from config files can be overwritten by environment variables which can be overwritten by cmd arguments.
To get a list of options' values that application will use in runtime, you can call it with //-a// or //--variables// argument.
Default location of config file is ///etc/ccr/ccr.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/database_architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/database_architecture/</guid><description>Database architecture Tables Clients Stores information about clients that have ever send any data. It includes:
* client IPv4 or IPv6
* transmission description presented by the client (e.g. tv station name) using -tcpdesc flag.
CREATE TABLE IF NOT EXISTS `clients` (
`cli_id` INT NOT NULL AUTO_INCREMENT,
`ip` VARBINARY(16) NOT NULL,
`desc` VARCHAR(300) COLLATE utf8_bin DEFAULT NULL,
PRIMARY KEY (`cli_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin AUTO_INCREMENT=1 ; ~~~</description></item><item><title/><link>https://ccextractor.org/public/gsoc/dv_support_request/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/dv_support_request/</guid><description>This seems interesting. Here's the original request email:
Does CCExtractor have support for extracting captions contained in the VAUX area on DV streams, and I just can't figure out how to use it?
If not, are there any plans to integrate this into CCExtractor? It seems to me that the only software available to do this is MacCaption, which costs many hundreds of dollars.
Here are some links to specifications I have run across: https://dvswitch.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/ffmpeg-rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/ffmpeg-rust/</guid><description>FFmpeg + Rust: Code builder Why is this a CCExtractor project and not an FFmpeg project?
Because the FFmpeg team doesn't need it :-) We do.
Introduction
FFmpeg is, of course, everybody's go-to tool when it comes to video manipulation: Resize, apply filters, convert to a different encoding or container, etc, it does it all. They even participate in GSoC every year!
If you read their documentation, you will see that FFmpeg, the command-line tool, is mostly a &amp;quot;shell&amp;quot; that actually builds a graph that then runs in their libraries.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/flutterrutorrent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/flutterrutorrent/</guid><description>rutorrent mobile interface Introduction
rutorrent is the most popular web interface for rtorrent, which is possibly the most used BitTorrent client in linux. It is mostly a web application, but it has its own backend that connects to rtorrent. You could connect to rtorrent directly as well, but by doing that you would be missing lots of features that come with rutorrent, for example RSS support.
Yes, there are two things with almost the same name.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/google_summer_of_code_2019/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/google_summer_of_code_2019/</guid><description>~~META: title = Google Summer of Code with CCExtractor Development! GSoC 2019 ~~
Google Summer of Code with CCExtractor Development! Click here for : Slack, Mailing List, 2019 Ideas Page, Past Archives, GitHub.
{{ :public/gsoc/gsoc-cc.png?nolink |}}
CCExtractor Development has been accepted to Google Summer of Code each year, ever since we applied for the first time in 2014 and we have had absolutely amazing 5 years! Continuing with open source spirit, we are actively applying to Google Summer of Code 2019 to work with potential new community members!</description></item><item><title/><link>https://ccextractor.org/public/gsoc/gsoc2016/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/gsoc2016/</guid><description>GSOC 2016 Project ideas Improving GitHub CI Estimated task time: 1 month+ - Difficulty: moderate-high**
Last year, as part of GSoC 2015, a first step towards CI on GitHub was made for the CCExtractor repository. CCExtractor possesses a huge repository with samples that are broken or were broken at some point. When adding new features the validity of those samples must be checked. At this moment we have a GitHub bot, written using python (50%), php (38%) and bash (12%).</description></item><item><title/><link>https://ccextractor.org/public/gsoc/gsoc2017/ccaligner_word_by_word_audio_subtitle_synchronisation_saurabh_shrivastava_gsoc_2017/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/gsoc2017/ccaligner_word_by_word_audio_subtitle_synchronisation_saurabh_shrivastava_gsoc_2017/</guid><description>This page has been moved here.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/gsoc2017/google_summer_of_code_2017_satyam_mittal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/gsoc2017/google_summer_of_code_2017_satyam_mittal/</guid><description>This page has been moved here.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/gsoc2017/python_extension_module_for_ccextractor_diptanshu_jamgade_gsoc_2017/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/gsoc2017/python_extension_module_for_ccextractor_diptanshu_jamgade_gsoc_2017/</guid><description>This page has been moved here.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/highspeedsync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/highspeedsync/</guid><description>~~META: title = Google Summer of Code 2018 - Write high speed subtitle synchronization tools ~~
**Write high speed subtitle synchronization tools **
Tool A - sync between two versions of the same footage: This is a very common use case: Suppose you have raw recording of a TV show, with commercials, etc, then use CCExtractor get the subtitles from it. Then you remove the commercials, and have a really clean recording, but the subtitles are out of sync since the timing changed the video.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/integratedgui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/integratedgui/</guid><description>~~META: title = Google Summer of Code 2017 - Create a integrated GUI, replacing what we have ~~
Create a integrated GUI, replacing what we have
This library
https://github.com/vurtun/nuklear/blob/master/Readme.md
allows creating amazing GUIs that are portable. We currently have separate GUIs (they are different binaries that run the command line main program) for each supported platform. The job is to create a GUI that is part of the current binary and that works in Windows / Linux / OSX.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/interestingbits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/interestingbits/</guid><description>~~META: title = Google Summer of Code 2018 - Detect Automatically the most interesting bits of sample videos ~~
Detect Automatically the most interesting bits of sample videos
Write software that is able to detect, for some kind of videos, the most interesting bits (highlights). You can use:
- Audio (for example, |detect |laughs)
Video (for example, detect high speed scenes or score changes) - Subtitles At a minimum, the following must be detected: - Goals in soccer (previous work exists; you can build on it or reimplement) - Three pointers in basketball - Jokes in sitcoms Plus any other 5 use cases you want to work on.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/japanese/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/japanese/</guid><description>Add Japanese support Watch this video.
And then come with a plan :-)
Qualification tasks
Take a look at this page.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/jokertv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/jokertv/</guid><description>~~META: title = Google Summer of Code 2018 - JokerTV integration ~~
JokerTV integration As you may know, our reference TV tuner has been for a long time the amazing HDHomeRun from Silicon Dust. They (all models) are rock-solid and they are really easy to integrate with. However, they don't support DTMB (the Chinese standard).
This small thing is JokerTV (stand-alone version).
You can see in the tech specs that everything we care about is supported, and that the list of chipsets is published, and that source code for everything, including firmware, is available.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/livetvooverinternet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/livetvooverinternet/</guid><description>~~META: title = Google Summer of Code 2018 - Add support for Live TV over the internet (such as YouTube TV) ~~
Add support for Live TV over the internet (such as YouTube TV) A number of platforms are appearing these days to distribute local TV content over the internet. For example, YouTube now has a live TV. Hulu does, too.
It's still early days for these platforms - they're trying to grab the business from the cable-cutters, while (possibly, for now) providing the same functionality, which is a live TV with DVR.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/ocr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/ocr/</guid><description>~~META: title = Google Summer of Code 2018 - Complete our OCR subsystem ~~
Complete our OCR subsystem Useful skills/interests: Image processing, Text Localization and Binarization, Tesseract API Subtitles come in all shapes and colors. Some are text based (such as American closed-captions, as specified in CEA-608 and CEA-708, or the old European teletext). Others are bitmap based such as the European DVB. When subtitles use bitmaps they are a lot more flexible, but also a lot harder to transcribe.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/pipot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/pipot/</guid><description>~~META: title = Google Summer of Code 2019 - PiPot (A micro honeypot for RPi) ~~
PiPot (A micro honeypot for RPi) PiPot was developed as part of a master thesis of one of the main contributors of CCExtractor. Due to time constraints it didn't see a lot of love the last few years, and that's where you could come in!
There is a &amp;quot;small&amp;quot; list of improvements that could be made to the platform, and which we'd love to see implemented, so that the platform is more usable in general.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/poormanrekognition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/poormanrekognition/</guid><description>Poor's man Rekognition Amazon Rekognition is a (paid) service that is able to identify objects, people, text, scenes, and activities in a picture. We want to produce a free alternative.
While being able to do everything Rekognition does over the course of a summer is unrealistic, we think we should be able to kickstart the effort and get to a point where the project will be usable and attract more developers to the effort.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/projectnephos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/projectnephos/</guid><description>~~META: title = Google Summer of Code 2018 - Project Nephos: Cloud based storage for a massive collection of TV recordings ~~
Project Nephos: Cloud based storage for a massive collection of TV recordings
There's a lot of documentation on our close friend organization Red Hen (just Google them, or check out their ideas page), but for our purposes these are the basic ideas:
- Red Hen is an informal (as in they're tied by collaboration, not contracts) group of entities, most of them large universities, from many places around the world that share resources.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/pythonbindings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/pythonbindings/</guid><description>~~META: title = Google Summer of Code 2018 - Write Python bindings for CCExtractor ~~
Write Python bindings for CCExtractor
Extend Python to use CCExtractor's library to access subtitles. You should export as much of CCExtractor as possible. At a minimum, it should be able to
- Open and close input video streams. - For an open stream, get the list of programs. - For a selected program, get the subtitles in various easy to use structures.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/pythonprofiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/pythonprofiler/</guid><description>Program Flow Visualizer Introduction Read this and then come back here :-)
The Task We want to build a complete profiler tool. During Google Code-in we created several proofs of concept, so we know it's possible, and we also know that it's a really good idea that got popular really fast. For reference, as you can see in the article linked above, five high school students created each their own implementation (by themselves) in around one month with really impressive results.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/rcloneweb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/rcloneweb/</guid><description>Web interface for rclone
rclone is a fantastic cloud sync tool. As good as it is though it lacks a web interface. This is of course not a problem for geeks as rclone's popularity proves. However, it is a problem for everyone else.
Your job is to create, possibly from scratch (feel free to look for previous efforts), the ultimate rclone web interface that makes it possible to do from it everything that should be doable of nothing that shouldn't be doable.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/rcloneweb2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/rcloneweb2/</guid><description>Extend rclone's webui rclone webui currently supports basic plugins like a video player and a music player. This functionality could be extended to incorporate new plugins which could be added by a user on the go, and developers could develop these plugins for rclone.
The functionality will be something similar to Google Drive. Ex. If you want to edit a doc file, rclone webui will have a plugin for it, once you enable the plugin, you would be able to edit documents using rclone.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/realtimecaptionswebsite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/realtimecaptionswebsite/</guid><description>~~META: title = Google Summer of Code 2017 - A web-site to view captions in real-time ~~
A web-site to view captions in real-time
There is a a web-site which allows viewing caption stream in real-time from web-browser. To fetch CC stream from TV tuner and send it to the server it uses separate application that parses CCExtractor's output. This project just has passed prove-of-concept stage, so at least you have to implement the following:</description></item><item><title/><link>https://ccextractor.org/public/gsoc/realtimesubtitles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/realtimesubtitles/</guid><description>~~META: title = Google Summer of Code 2018 - Real time subtitles system ~~ This is our proof of concept demo for real time subtitles.
It's fed in real time by a number of HDHomeRun tuners that are connected to CCExtractor, which in turn decodes the subtitles and uploads them to this system, which uses NodeJS among other things.
Right now, only monitoring web page is implemented (the one you see in demo), which is not intended to be used by end-users.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/repository_architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/repository_architecture/</guid><description>Server Application Architecture After installation, you'll have the following files in your file system:
* /usr/bin/ccr -- Server application executable
* /usr/bin/ccr-watchdog -- Connection watchdog script (in case you installed it)
* /etc/init.d/ccr -- Service script file
* /etc/init.d/ccr-watchdog -- Connection watchdog service (in case you installed it)
* /usr/bin/ccextractor -- CCExtractor executable
* /etc/ccr/ccr.ini -- Server application configuration file
* /etc/ccr/db.ini -- Database connection configuration file</description></item><item><title/><link>https://ccextractor.org/public/gsoc/repository_clients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/repository_clients/</guid><description>Connecting to the server There main program that can be used to connect to repository server is CCExtractor. You'll need to use the following options to specify input stream, server address and and some stream information:
- Input options:
* **-** or **-stdin** to read video stream from standard input
* **-s** or **--stream** to read a file that continuously growing
* **-udp port** to read video stream from UDP port</description></item><item><title/><link>https://ccextractor.org/public/gsoc/repository_gsoc2015/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/repository_gsoc2015/</guid><description>GSOC 2015 Evaluation You can find it working at http://web-1567166165.us-west-2.elb.amazonaws.com/view. Ask me personally for DNS name to connect the tuners.
It's working with 5 web server instances and 5 repository server app instances. It's been working for 4 days straight and 2 tuners reconnected 1 time. It's 24.08 now :)
I've added 2 deployment guides for Amazon AWS and a guide on how to connect a client application. You call walk them thought to evaluate my project.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/repository_logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/repository_logs/</guid><description>Logging Repository server application can produce two log files for error and debug messages. The first one is used for logging errors that caused server to close connection or to terminate (such as &amp;quot;out of memory&amp;quot; errors). The second one is used for logging client activities and tracing system events. This log file is turned off by default.
You can logging behavior by changing these options:
* **error-log** -- Path to error log file (default: /var/log/ccr-error.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/repository_protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/repository_protocol/</guid><description>Protocol specification This document describes transmission protocol between repository (server) and CCExtractor (client)
Transmission units Client communicates with the server by sending packets of arbitrary length. In the source code they are called blocks, for some unknown reason :) These packets have the following syntax:
- 1 byte -- Control command number -- defined protocol constant that represents packet's data
- 10 bytes -- Packet's data length (N) -- string with decimal number &amp;gt;= 0 with leading zeroes that contains the size of packet payload.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/repository_quick_install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/repository_quick_install/</guid><description>Quick Installation Guide This is a guide for deploying repository on a single instance. For that we'll use Amazon EC2 Instance with Linux AMI 2015.03. Make sure that you opened 80, 22 and 3030 TCP ports, they will be used for Web access, SSH and to connect tv tuners.
- First, you'll need to install packets required for compilation, Apache and MySQL servers:sudo yum localinstall -yhttp://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm sudo yum install -y mysql-community-server sudo yum install -y git gcc mysql-devel httpd24 php56 php56-mysqlndFirst two command will install MySQL server of 5.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/rokuchannel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/rokuchannel/</guid><description>Roku reference channel Roku is currently the most common media streamer. It's cheap and neutral (it's not in any &amp;quot;fight&amp;quot;). Unfortunately, there aren't any good open source channels, so if you want to start your own you have to start from scratch. We want to fix that by creating the &amp;quot;reference&amp;quot; source code for a generic channel. We will send a free Roku to our student for development.
What makes a good Roku channel?</description></item><item><title/><link>https://ccextractor.org/public/gsoc/rule-engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/rule-engine/</guid><description>TBD</description></item><item><title/><link>https://ccextractor.org/public/gsoc/subtitle_extractor_technical_docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/subtitle_extractor_technical_docs/</guid><description>Subtitle Downloader Technical Documentation This page contains how the service modules were coded and also how to add support for a new service.
Main Module This module is responsible for detecting the type of service module to be used and calls the appropriate service module. A simple string search for the service name is done on the input URL to find the type of service. Errors are handled accordingly.
Hulu We first require the page source of the video.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/swaglyrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/swaglyrics/</guid><description>SwagLyrics-For-Spotify You can find the project at GitHub.
You can find a list of important issues here.
Getting started / Requirements The software is written in Python, so we expect good knowledge of Python. Basic HTML, Javascript &amp;amp; CSS knowledge is also required. You should be able to demonstrate that you possess the skills to successfully implement your proposal.
We make use of quite some libraries to support all platforms, and we expect you to read up on the documentation of these platforms so you know how they work in general.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/timeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/timeline/</guid><description>Timeline ^ Start ^ End ^ What ^ Who ^ | April 27th | May 25th | Community bonding period *Complete personal information in this wiki *Prepare accounts for everyone in all systems *Synchronize plans | Everyone | | May 25th | | GSoC official date to start coding, initial payments. | Everyone | | May 25th | | CCExtractor bug hunting start. Fix as many issues as we can from GitHub's issue tracker before we start adding new features.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/votecounter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/votecounter/</guid><description>Vote counter and reporter Introduction
Yes, we've just seen it again in Iowa, but it's not really a new thing or a new need: Use of electronic voting, counting and reporting is becoming the norm, and so are the problems and lack of trust in the process.
We need to do something.
Your job
Your job is to design and implement an universal tool that can be trusted by everybody to help with voting, counting and reporting in any election.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/welcome_to_summer_of_code_2015/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/welcome_to_summer_of_code_2015/</guid><description>Welcome This is CCExtractor's GSOC 2015 Wiki.
Red Hen has another document system (generic, not GSoC-specific), please ask Mark or Francis for access. It is fine to create Red Hen pages here (by anyone) if it's found to be more convenient.
About this wiki:
Anyone with access can edit existing pages and create new ones. It is expected to contain all relevant information. If it's not here it doesn't exist :-) It will eventually contain sensitive information (such as passwords), therefore make sure your own access credentials to the wiki are not shared with 3rd parties.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/welcome_to_summer_of_code_2016/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/welcome_to_summer_of_code_2016/</guid><description>Please visit Welcome to Summer of Code 2015 :-) it's still relevant.</description></item><item><title/><link>https://ccextractor.org/public/gsoc/windowstesting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/windowstesting/</guid><description>Enable automated testing on windows and other general sample platform improvements
The sample platform has been a good way to test regression tests, but still lacks windows support. It's been foreseen, but unfinished. It should be finished, so we can ensure it's working both on Linux and Windows. Besides that, there are some things that need to be finished. This task thus encompasses:
a) Windows support b) FTP upload support c) Improved error detection d) Other small listed improvements on the issue tracker</description></item><item><title/><link>https://ccextractor.org/public/gsoc/wordbywordsync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/wordbywordsync/</guid><description>~~META: title = Google Summer of Code 2017 - Do word by word subtitle-audio sync ~~
Do word by word subtitle-audio sync
The usual subtitles files, such as .srt, do a line by line sync - meaning the subtitles appear when the person starts talking, says a few words, then the line disappears and a new one appears, etc.
1 00:02:17,440 --&amp;gt; 00:02:20,375 Senator, we're making our final approach into Coruscant.</description></item><item><title/><link>https://ccextractor.org/wiki/dokuwiki/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/wiki/dokuwiki/</guid><description>DokuWiki DokuWiki is a simple to use and highly versatile Open Source wp&amp;gt;wiki software that doesn't require a database. It is loved by users for its clean and readable wiki:syntax. The ease of maintenance, backup and integration makes it an administrator's favorite. Built in access controls and authentication connectors make DokuWiki especially useful in the enterprise context and the large number of doku&amp;gt;plugins contributed by its vibrant community allow for a broad range of use cases beyond a traditional wiki.</description></item><item><title/><link>https://ccextractor.org/wiki/syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/wiki/syntax/</guid><description>Formatting Syntax doku&amp;gt;DokuWiki supports some simple markup language, which tries to make the datafiles to be as readable as possible. This page contains all possible syntax you may use when editing the pages. Simply have a look at the source of this page by pressing &amp;quot;Edit this page&amp;quot;. If you want to try something, just use the playground page. The simpler markup is easily accessible via quickbuttons, too.
Basic Text Formatting DokuWiki supports bold, //italic//, __underlined__ and monospaced texts.</description></item><item><title/><link>https://ccextractor.org/wiki/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/wiki/welcome/</guid><description>Welcome to your new DokuWiki Congratulations, your wiki is now up and running. Here are a few more tips to get you started.
Enjoy your work with DokuWiki, -- the developers
Create your first pages Your wiki needs to have a start page. As long as it doesn't exist, this link will be red: :start.
Go on, follow that link and create the page. If you need help with using the syntax you can always refer to the syntax page.</description></item><item><title> Google Summer of Code 2020 - The sample platform / Continuous integration revisited</title><link>https://ccextractor.org/public/gsoc/sampleplatform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/sampleplatform/</guid><description>The sample platform was developed during GSoC '15 and overhauled during GSoC '16. In GSoC '17 another student added support for the Windows part, as well as some bugfixes. The student continued his work during GSoC '18, and will mentor this year. Last year a new student did some improvements and bugfixes.
This GCi edition we came to the conclusion that for new contributors, there are a bunch of drawbacks in the current system that make it no longer viable to continue to run the platform in it's current form.</description></item><item><title>About CCExtractor Development</title><link>https://ccextractor.org/public/general/about_the_org/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/about_the_org/</guid><description>CCExtractor Development is an informal (meaning we're not incorporated anywhere) organization that exists to coordinate the development efforts of the volunteers that contribute to the software and to manage our participation in specific events such as Google Summer of Code and Code-In.
The following video is a contribution from Manveer Singh Basra, a Code-In 2016 student:</description></item><item><title>About Rust</title><link>https://ccextractor.org/public/general/rust_resources/rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/rust_resources/rust/</guid><description>What can do you with Rust?
Why the Rust language is on the rise
My first impressions of Rust
Useful reads From Python into Rust
into_rust() : Screencasts for learning Rust!
Stanford course on Rust
Comparing C and Rust network protocol exercises
Vectors and Hash Maps
Big Data Benchmarks
Journey to Async/Await
Rust once and share it with Android, iOS and Flutter
Problems (hint: we use these resources ourselves for tasks) Thread on reddit</description></item><item><title>Activity Extractor Technical Documentation</title><link>https://ccextractor.org/public/codein/activity_extractor_technical_docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/codein/activity_extractor_technical_docs/</guid><description>This page contains how the service modules were coded and also how to add support for a new service.
Module Information ActivityExtractor.py This module is responsible for processing the parameters passed through the command line and calling the appropriate streaming service.
It passes the streaming service a dictionary containing credentials required to complete the process The dictionary is formatted like this:
parameters = { 'url': self.url, 'email': self.email, 'password': self.</description></item><item><title>Beacon.</title><link>https://ccextractor.org/public/gsoc/beacon/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/beacon/</guid><description>Have you ever been to a city tour, or hike, or anything else in which a whole group is supposed to stay together by following a leader (who hopefully, knows where is going) but you don't know anyone else in the group and you can't really get distracted or you might lose the group?
Well, this is the first use case the beacon is supposed to solve!
The basic idea is this:</description></item><item><title>Blog Posts from our Students</title><link>https://ccextractor.org/public/blog_posts_our_students/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/blog_posts_our_students/</guid><description>Our Google Summer of Code Students are hard at work, but they are also creative writers who document their journey and adventure while developing their projects. Here you can find many blog posts linking to their blog posts where they describe the process on how it is to work for CCExtractor and Google Summer Of Code
Google Summer of Code 2020 Aadi Bajpai(@aadibajpai) is working on SwagLyrics Google Summer of Code Phase 1 Pulkit Mishra(@pulkit) is doing Poor Man’s Rekognition Google Summer of Code - Chronicles GSoC Chronicles — Only Time will Tell GSoC Chronicles — Best Kept Code Google Summer of Code 2019 Artem Fedoskin(@thelastpolaris) with his project Poor Mans Rekognition GSoC 2019 Starts!</description></item><item><title>CCAligner : Word by Word Audio Subtitle Synchronisation</title><link>https://ccextractor.org/public/gsoc/2017/saurabh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2017/saurabh/</guid><description>Developed under Google Summer of Code, 2017 with CCExtractor Development By Saurabh Shrivastava
Blog entry for final submission : (https://saurabhshri.github.io/gsoc-final-submission/)
Introduction The usual subtitle files (such as SubRips) have line by line synchronisation in them i.e. the subtitles containing the dialogue appear when the person starts talking and disappears when the dialogue finishes. This continues for the whole video. For example :
1274 01:55:48,484 -&amp;gt; 01:55:50,860 The Force is strong with this one</description></item><item><title>CCExtractor bug hunt</title><link>https://ccextractor.org/public/gsoc/ccextractor_bug_hunt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/ccextractor_bug_hunt/</guid><description>The first 1-2 weeks are to be spent fixing bugs and closing issues in GitHub. This applies to all CCExtractor students that are going to be working on the core tool (that's almost everyone). This serves some purposes:
It's the best way to see first-hand what the problems are :-) It will let you get used to the code. It will give us a reliable version that is fun to work with The following table should be populated before the start of the coding period.</description></item><item><title>CCExtractor downloads</title><link>https://ccextractor.org/public/general/downloads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/downloads/</guid><description>Current version: 0.88 (May 21st, 2019)
CCExtractor's source code
CLI Source code full
CLI Source code without Windows blobs (reduced size)
Windows GUI Source code (Windows only; requires Visual Studio)
Cross platform GUI
Windows binaries
Windows binaries (just the GUI and the command line programs, without installation)
Windows installer, first attempt with InstallShield - if it doesn't work just use the zipped binaries above
Note: Starting with 0.84 we're bundling two binaries for the main program: With and without OCR.</description></item><item><title>CCExtractor regresssion testing / GitHub bot</title><link>https://ccextractor.org/public/gsoc/ccextractor_regression_testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/ccextractor_regression_testing/</guid><description>In 2014 Willem wrote a nice tool that allows you to compare CCExtractor's output between versions to make sure code changes didn't break things. This tool has been expanded in t he past two years to cover more scenario's, as well as offering better integration.
All changes must be validated using this tool. As of 2016, it is fully integrated (using a webhook) with GitHub, so if you make a Pull Request, you should be able to see if you broke anything or not.</description></item><item><title>CCExtractor tasks</title><link>https://ccextractor.org/public/gsoc/ccextractor_tasks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/ccextractor_tasks/</guid><description>This page is a compilation of the most important tasks from everyone's proposals. Those of you that are going to be working on the same things please talk among yourselves.
Add tasks and edit as needed.
We know that there were some proposals that included the exact same tasks. We preferred to pick the best students and not just the best proposals for each task. If you find yourself in a situation in which someone else is doing what you were planning to do, just replace that task with even a more interesting one :-) Don't get frustrated by this overlap.</description></item><item><title>CCExtractor Web : A web application for subtitle extraction through CCExtractor.</title><link>https://ccextractor.org/public/gsoc/2018/saurabh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2018/saurabh/</guid><description>Developed under Google Summer of Code, 2018 with CCExtractor Development By Saurabh Shrivastava
Blog entry for final submission :(https://saurabhshri.github.io/gsoc-2018-final-submission)
Introduction The aim of the project is to create an easy to use web application that can be hosted on a web-server for subtitle extraction using CCExtractor. The idea is simple -- the users do not need to install CCExtractor on their own machine, they can directly use the web application to process their files anytime, anywhere.</description></item><item><title>CEA-708</title><link>https://ccextractor.org/public/gsoc/olegkisselef_cea_708/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/olegkisselef_cea_708/</guid><description>CEA-708 is the latest standart for ATSC DTV closed captioning. DTVCC (DTV Closed Captions) decoding and output was improved by Oleg during this summer. Along with major refactoring, more control commands support was added. Now ccextractor can handle 16 bit encoded captions in DTVCC streams, so lots of non-latin languages symbols could be extracted. Output to popular subtitles formats such as SAMI, Transcript and Timed transcript was added. Colored and styled captions will be extracted with information about it (where applies).</description></item><item><title>Command line usage</title><link>https://ccextractor.org/public/general/command_line_usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/command_line_usage/</guid><description>CCExtractor's main program is console based. There's a GUI for Windows, as well as provisions so other programs can easily interface with CCExtractor, but the heavy lefting is done by a command line program (that can be called by scripts so integration with larger processes is straightforward).
Running CCExtractor without any parameter will display a help screen with all the options. As of version 0.88 the help screen is as follows:</description></item><item><title>Commercial detection</title><link>https://ccextractor.org/public/gsoc/2016/vasanth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2016/vasanth/</guid><description>The commercial detection system identifies and reports the location of commercials in a given segment of TV recording. Once a database of commercials is created using the interface provided, it is able to achieve a detection accuracy of 100%. There is a command line interface which takes as input a video and outputs the location and contents of each of the commercials. The person who is maintaining the system can then seek through the video and classify parts of the video using a web interface.</description></item><item><title>Compiling the Python Extension module for CCExtractor</title><link>https://ccextractor.org/public/gsoc/python_extension_module_compilation_documentation_gsoc_17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/python_extension_module_compilation_documentation_gsoc_17/</guid><description>Dependencies The Python extension module for Python module has additional dependencies in comparison to the dependencies of CCExtractor. The documentation about the dependencies of CCExtractor can be accessed here. However, for compiling of the Python extension module for CCExtractor, the user needs to compile the following two dependencies: SWIG SWIG is used for generating the wrappers for C code in CCExtractor as well as for generating the module.</description></item><item><title>Cool external projects that use subtitles or do sorcery with a video stream</title><link>https://ccextractor.org/public/general/coollinkswithsubfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/coollinkswithsubfs/</guid><description>Note to GSoC applicants: Yes, you can use them. That's what open source is for. But if you decide to base on work on any of these: 1) Contact the original developer(s) and share your plan. They may be able to help you, but it's just a courtesy. 2) You proposal should consider that you are not starting from scratch. 3) Make sure you keep original credits intact, even in the cases where the license allows you to remove them.</description></item><item><title>Cross-platform Qt GUI</title><link>https://ccextractor.org/public/gsoc/olegkisselef_qt_gui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/olegkisselef_qt_gui/</guid><description>CCExtractor Cross-platform Qt GUI lets users not familiar with CLI to extract subtitles. Oleg implemented the application using Qt framework, what makes possible to run it on Linux/Unix/MacOSX/Windows desktop platforms. Design of the application is based on previous windows-only version, but it was a bit redesigned to follow &amp;quot;Extracting subtitles has never been so easy&amp;quot; concept and be as user-friendly as possible. Some options were also added according to latest ccextractors' features.</description></item><item><title>DVD Subtitle Extraction</title><link>https://ccextractor.org/public/gsoc/2016/rishabh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2016/rishabh/</guid><description>Commits All my work done during GSoC commited to the mainstream master branch can be found here.
Technical Documentation The technical documentation on how the code is structured as well as installation is available here.
About the Project DVD Subtitle Extraction My project was to add support for DVD subtitles. CCExtractor had support for DVD Closed Caption however new DVDs contain DVD subtitles instead of the older DVD Closed Captions. I have added support such that supplying a VOB file normally to CCExtractor works to extract the DVD Subtitles.</description></item><item><title>DVD Subtitles Technical Documentation</title><link>https://ccextractor.org/public/gsoc/dvd_subtitles_technical_documentation_gsoc_16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/dvd_subtitles_technical_documentation_gsoc_16/</guid><description>Overview This project was done as a part of GSoC 2016. DVD subtitles extraction works by filtering out the subtitle frames from the video stream and obtaining the RLE encoded bitmap based subtitles, which are then provided to Tesseract for OCR recognition.
Dependencies Tesseract (OCR library by Google) Leptonica (C Image processing library) The instructions for compilation along with the OCR can be found in the CCExtractor docs at docs/OCR.</description></item><item><title>Enable automated testing on windows and other general sample platform improvements</title><link>https://ccextractor.org/public/gsoc/2017/satyam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2017/satyam/</guid><description>Developed under Google Summer of Code, 2017 with CCExtractor Development By Satyam Mittal
Introduction The CCExtractor Sample Platform manages a test suite bot, sample upload and more. This platform allows for a unified place to report errors, submit samples, view existing samples and more. The sample platform has been a good way to test regression tests, but still lacks windows support. It needs some improvements that are listed on issue tracker.</description></item><item><title>Extend the app to support more torrent clients</title><link>https://ccextractor.org/public/gsoc/flutter-more-clients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/flutter-more-clients/</guid><description>Deluge
Deluge is a popular BitTorrent client. It's popular because it's quite efficient and performs really well compared to alternatives, but its web interface is terrible and the desktop UI is not great.
However it does have a good plugin system and writing proper alternatives with Flutter is possible and not painful, so let's go for it.
The goal is to write a flutter-based interface (web and mobile).
Start by installing deluge and its current web UI so get a feeling of how it looks like, and come up with a good replacement UI.</description></item><item><title>Extract hard-coded subtitles from video streams</title><link>https://ccextractor.org/public/gsoc/2016/abhinav/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2016/abhinav/</guid><description>Documentation for my project can be seen here.
Description My project was to add the capability of extracting burned-in (hard) subtitles from videos to CCExtractor. As of now, CCExtractor works by only extracting caption data in the video if it is present in specific structures in the stream, and skips the actual video data (pixels) completely. However a lot of videos have hard subtitles burned into them, extracting which is a computer vision problem, and something which CCExtractor did not earlier have the capability to process.</description></item><item><title>Extracting closed captions from a DVD step by step tutorial</title><link>https://ccextractor.org/public/gsoc/extract_from_dvd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/extract_from_dvd/</guid><description>Note: This procedure may or may not be legal in your country, depending on whether they consider it fair use. I own the DVD used in the tutorial and I am not going to distribute anything from it, plus I live in a country where this sounds reasonable, so I believe I am in the safe side. But your mileage may vary.
This tutorial was written years ago. Probably better tools exist already to do the same thing.</description></item><item><title>FabBits</title><link>https://ccextractor.org/public/gsoc/2018/achie27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2018/achie27/</guid><description>Videos contain plethora of contextual information. For example, in a movie there are fighting scenes, sentimental scenes, romantic scenes, and many others. In a cricket match, there are wickets, sixes, fours et cetera. With the advent of the data-driven age, amateurs, researchers, and organisations alike require some specific part of this contextual information for their needs; maybe for creating a highlights reel of a sports match or mining data from movies for their machine learning models.</description></item><item><title>Flutter Resources</title><link>https://ccextractor.org/public/general/flutter_resources/flutter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/flutter_resources/flutter/</guid><description>Tutorials Building a portfolio website
Game of Life with Flutter
12 Useful libraries to support development using flutter
Flutter Tutorial: Real Estate App
Flutter Tutorial: Courses App
Handwriting number recognizer with Flutter and Tensorflow (part I)
A very sexy Flutter template app with great focus on UI
60 Days Of Flutter : Building a Messenger from Scratch
Hotel Booking App UI
ChatBot in Flutter using DialogFlow
Roadmap To Become A Flutter Developer (Resources for Beginners)</description></item><item><title>Getting started with CCExtractor's source code</title><link>https://ccextractor.org/public/general/gettingstartedwithourcode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/gettingstartedwithourcode/</guid><description>This page is currently being written (a bit every day, actively) so new developers that want to join us don't have to learn the basics from scratch.
We often get questions about how to get started with our code. The most important thing would be: Don't try to read and understand every file, because it's pointless and there's no need. While it's definitely not the linux kernel, CCExtractor's code is not trivial, and it's been written by a number of people during a long time.</description></item><item><title>Google Code-in 2016 task list</title><link>https://ccextractor.org/public/codein/google_code-in_2016_task_list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/codein/google_code-in_2016_task_list/</guid><description>Code-In 2016 finished already. We're really sad, but it's been an amazing experience so we will be back!
Questions? You can email us at code-in@ccextractor.org. But please make sure you read the whole page first.
For tasks that require some resources in general we will provide them for you, including access to videos, system accounts, etc.
Remember that the absolute best way to get invited by an organization to participate in Summer of Code is by being part of the community before GSoC is even announced.</description></item><item><title>Google Code-in 2017 for designers</title><link>https://ccextractor.org/public/codein/google_code-in_2017_code-in_for_designers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/codein/google_code-in_2017_code-in_for_designers/</guid><description>This year we are going to have some hard design tasks to bring design up to par with coding. Hard means that they are going to take time and talent to produce the quality results we want.
At least one of our finalists will be a designer even if he or she has not contributed code. We are doing this to prevent the design tasks being treated just as an easy way to complete beginner tasks.</description></item><item><title>Google Code-in 2019/ Flutter</title><link>https://ccextractor.org/public/codein/google_code-in_2019/flutter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/codein/google_code-in_2019/flutter/</guid><description>While the tasks themselves can't be made public until the GCI starts officially, we think it's OK to explain the kind of things we want to do for those of you that want to somehow get started - not with the tasks themselves, which is not possible, but getting prepared to start working immediately.
If you have already done some basic digging about Flutter, you already know what it is: A new platform that lets you write apps that will work both on Android, iOS and web.</description></item><item><title>Google Summer of Code (GSoC) 2018 ideas page</title><link>https://ccextractor.org/public/gsoc/ideas_page_for_summer_of_code_2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/ideas_page_for_summer_of_code_2018/</guid><description>Welcome to our ideas page. This is going to be an amazing year - lots of new things to work on, including JokerTV, a totally open TV receiver, plus several experimental/for fun projects. Projects in C, Node, Python... you name it, we have it. Plus resources for students - we'll give access to a high speed server, all our samples (we'll even ship a portable drive with them anywhere in the world, so don't worry about slow connections).</description></item><item><title>Google Summer of Code (GSoC) 2019 ideas page</title><link>https://ccextractor.org/public/gsoc/ideas_page_for_summer_of_code_2019/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/ideas_page_for_summer_of_code_2019/</guid><description>Welcome to our ideas page. This is going to be an amazing year - lots of new things to work on, including JokerTV, a totally open TV receiver, plus several experimental/for fun projects. Projects in C, Node, Python... you name it, we have it. Plus resources for students - we'll give access to a high speed server, all our samples (we'll even ship a portable drive with them anywhere in the world, so don't worry about slow connections).</description></item><item><title>Google Summer of Code (GSoC) 2020 ideas page</title><link>https://ccextractor.org/public/gsoc/ideas_page_for_summer_of_code_2020/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/ideas_page_for_summer_of_code_2020/</guid><description>Welcome to our ideas page. It's great you want to start early. Please join us in our slack channel! (we'll leave as an exercise to you to find it --- it's on our website).
This is going to be an amazing year --- lots of new things to work on, including JokerTV, a totally open TV receiver, plus several experimental/for fun projects. Projects in C, Node.js, Python, Rust and more, you name it, we have it.</description></item><item><title>Google Summer of Code 2017 ideas page</title><link>https://ccextractor.org/public/gsoc/ideas_page_for_summer_of_code_2017/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/ideas_page_for_summer_of_code_2017/</guid><description>About us
We are a small org, which means that your contribution is expected to have a very large impact. It's not going to mean a 0.5% improvement on a big project - it's supposed to be like 10% on a medium size one. So please come only if you like the challenge and feel like that you are ready to have a serious responsibility.
We have -we think- statistically amazing continuity in the team: Most GSoC students from all the past years are still involved, even if they are no longer eligible as students.</description></item><item><title>Google Summer of Code 2018 - Add support for DTMB countries</title><link>https://ccextractor.org/public/gsoc/dtmb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/dtmb/</guid><description>Add support for DTMB countries
DTMB is the Chinese TV standard, adopted by other countries such as Cuba. We still don't know much about it. Due to this, your proposal must include:
a) A link to the relevant standard documents. We don't know if they exist in English. If they don't but you speak the language they are in, that's fine. If you locate the documents but they require payment (as is often the case for technical specifications) send us a link to buy and we'll allocate organization funds to purchase them.</description></item><item><title>Google Summer of Code 2018 - Complete 708 support</title><link>https://ccextractor.org/public/gsoc/complete708support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/complete708support/</guid><description>Complete 708 support
708 is the standard for digital TV in the US and a few other countries. We have preliminary support, but the goal is a 100% accurate implementation. This means:
a) Perfect timing. b) Perfect rendering, limited only by the output format. c) Full support to all languages for which samples are available.
We will provide hundreds of samples (for which you must complete support, no exceptions) and access to a high speed linux server for you to work with if needed.</description></item><item><title>Google Summer of Code 2021 - CCExtractor Rust scaffolding</title><link>https://ccextractor.org/public/gsoc/cc_rust_scaffolding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/cc_rust_scaffolding/</guid><description>Initial Rust scaffolding
We want to port/rewrite CCExtractor to Rust. There are a a few reasons for it, some purely practical, and some philosophical:
Rust is exciting, and this work is quite motivating for the team that has been working on it for a long time. Contribute to improve the situation of video support on the Rust ecosystem. Our code has grown from &amp;quot;I don't know what I'm doing&amp;quot; to &amp;quot;look ma, I support a million things now&amp;quot; and it shows.</description></item><item><title>Google Summer of Code 2021 - Complete 708 support</title><link>https://ccextractor.org/public/gsoc/cc_rust_708/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/cc_rust_708/</guid><description>Port and/or rewrite CEA-708 support to Rust
708 is the standard for digital TV in the US and a few other countries. We have preliminary support in C. We'd like to port it to Rust, and while we are at it complete the known missing bits.
This means:
a) Perfect timing. b) Perfect rendering, limited only by the output format. c) Full support to all languages for which samples are available.</description></item><item><title>How to hire us</title><link>https://ccextractor.org/public/general/how_to_hire_us/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/how_to_hire_us/</guid><description>If you need custom work regarding CCExtractor you can send Carlos an email:
Carlos is currently in San Francisco.
An important thing: CCExtractor changes always become part of the mainstream version. We don't keep one open source version and many private versions for clients.
Work related to CCExtractor that does not require changes to CCExtractor itself (GUIs, monitoring system, integration with 3rd party software) can be closed source, subject to NDAs, etc.</description></item><item><title>Implement a modern RPC interface for rTorrent</title><link>https://ccextractor.org/public/gsoc/rtorrent-modern-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/rtorrent-modern-rpc/</guid><description>Introduction
rTorrent currently uses an antique XMLRPC interface, which is limited in capability, not scalable, hard to use, insecure and low-performance. Community needs a modern RPC interface with full bidirectional, stream processing, incremental data loading and high concurrency capabilities, which allows real-time events for RPC users, reduced serialization/transfer overheads, potentially better security (with authentication and/or TLS), etc.
jesec implemented feature-complete JSON-RPC over SCGI support for rTorrent [1]. Preliminary tests showed that, when compared with XMLRPC, JSON-RPC yields 2x performance, 15% lower total CPU time in rTorrent process, 33% lower total CPU time in RPC user’s process.</description></item><item><title>Improving GitHub CI</title><link>https://ccextractor.org/public/gsoc/2016/willem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2016/willem/</guid><description>This year of GSoC focused on improving the existing tools I wrote the previous years (2014 &amp;amp; 2015) to achieve full GitHub integration.
This was achieved through:
A full rewrite of the existing sample platform for compatibility reasons Migrating the VirtualBox VM environment to a KVM enviroment to ensure that tests run in a decent amount of time, while staying secure. Running tests under the Windows platform. Integrating the platform with GitHub using webhooks Rewrite of the sample platform Last year's sample platform was written using PHP (https://github.</description></item><item><title>Interview preparation</title><link>https://ccextractor.org/public/general/misc/interview_preparation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/misc/interview_preparation/</guid><description>For now this is quite disorganized, just a collection of links. But it will get better :-
Data Structures and Algorithms coding challenge #2 | Programming challenges in September, 2019
101 Coding Problems and few Tips to Crack Your Next Programming Interviews</description></item><item><title>Linux tuning</title><link>https://ccextractor.org/public/gsoc/linuxtuning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/linuxtuning/</guid><description>Introduction
The linux kernel has hundreds of tunable settings. Some can be modified on the fly with sysctl; others require reboots, loading modules and so on.
Your job
Your job is to come up with a self-tuning system that does all the analysis it needs and finds the optimum settings to maximize throughput and/or latency for well defined workloads. One of the must be BitTorrent, since that one uses a lot of traffic and it can just be tested with real data instead of synthetic tests.</description></item><item><title>Mastermind #3: Write the backend (in any language you want) for a competition between student submissions</title><link>https://ccextractor.org/public/codein/google_code-in_2019/mastermind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/codein/google_code-in_2019/mastermind/</guid><description>We already had two tasks about this superfun yet easy to understand game (links below). Many students have worked on creating mastermind players, so it's time to make them compete against each other! Let's see who's algorithm is better.
In order to do this, we need a servers for the players to connect to and play. Your job is to implement such a server.
We have come up with a simple protocol between player and server.</description></item><item><title>Micro Honeypot for RPi</title><link>https://ccextractor.org/public/gsoc/2019/vertexc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2019/vertexc/</guid><description>Mentor: Willem Van Iseghem Introduction PiPot is a honeypot server which pretends as a potential target for attackers from network and collect the attack data. It also has the ability to deploy more instances to make it harder to get information from the real one. The goal of this GSOC project is to improve the functionality and scalability of the current PiPot.
Links Project repo - https://github.com/PiPot
Completed work(PR) Server Development(Every new feature is covered with unit test) Create and run server inside python virtualenv set up virtualenv for server Run PiPot on non-Arm platform like RPi allow user specific network interface suppot image deployment on non-Arm platform Allow container-based service uploading container based service upload Allow dynamic data report update dynamic report update Allow service version update fix service cannot upload properly add service manager interface, upgrade from old to newer models from updated service add test on invalid test update Continuous Integration travis setup, add test database setup and with some basic tests notification management test add codecov start sql service explicity on travis Python2 to Python3 migration update enum attribute for sqlalchemy table fix enum attribute iteration issue due to python3 update Usage To install pipot, please follow the installation section.</description></item><item><title>Mouseless for Linux</title><link>https://ccextractor.org/public/gsoc/mouseless/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/mouseless/</guid><description>Introduction
Mouseless is a nice tool to practice keyboard shortcuts for a few popular apps. Unfortunately it's only available for Mac. We'd like to create an open-source Linux version that can be easily extended.
Your job
We don't want to clone Mouseless (we don't have any relationship with their authors, and we don't want to copy any of their work) - but the idea is good, and we think we can do a good job doing a tool that does a similar job of training users to use the mouse less and the keyboard more, but for the usual Linux tools.</description></item><item><title>News shot classification</title><link>https://ccextractor.org/public/gsoc/2016/shruti/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2016/shruti/</guid><description>My project is documented at https://shrutigullapuram.wordpress.com/2016/08/22/gsoc-work-product-submission/. My project was for Red Hen Lab, which is a sister org of CCExtractor.</description></item><item><title>Poor Man's Rekognition</title><link>https://ccextractor.org/public/gsoc/2019/faizkhan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2019/faizkhan/</guid><description>Mentor: Johannes Lochter Introduction Building a free version of Amazon rekognition with maximum possible feature during a 3 months' time span.
Links Proposal
GitHub(final submission)
Medium blog: https://medium.com/@b216029 (refer this for detailed information about each use-case)
independent github code: https://github.com/backSpace001/poor_man_rekognition
Use-cases 1.Face and Eye Detection using OpenCV - - completed 👍
2.Facial recognition of a video using deep metric learning - - completed 👍
3.Celebrity Recognition - - completed 👍</description></item><item><title>Poor Man's Rekognition</title><link>https://ccextractor.org/public/gsoc/2019/pymit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2019/pymit/</guid><description>Mentor : Johannes Von Lochter Developed under Google Summer of Code, 2019 with CCExtractor Development By Amit Kumar
Introduction The main aim of the project is to make an open-source version of Amazon Rekognition which is a (paid) service that is able to identify objects, people, text, scenes, and activities in a picture. To accomplish this, I proposed a solution by using tech stacks such as Django, Django-Rest-Framework, ffmpeg, TensorFlow Serving and ReactJS.</description></item><item><title>Poor Man's Rekognition</title><link>https://ccextractor.org/public/gsoc/2019/sziraqui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2019/sziraqui/</guid><description>Developed under Google Summer of Code 2019 by Sarfaraz Iraqui
Mentor: Johannes Von Lochter
Introduction Poor Man's Rekognition (PMR) aims to provide a free and open source alternative to Amazon Rekognition.
Amazon Rekognition is a fairly complex system.
During GSoC, the project focused on face detection and recognition only.
There are many libraries especially in Python that provide these functionality but they require a lot of expensive hardware for practical use.</description></item><item><title>Poor Man's Rekognition (III)</title><link>https://ccextractor.org/public/gsoc/poormanrekognition2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/poormanrekognition2/</guid><description>Amazon Rekognition is a (paid) service that is able to identify objects, people, text, scenes, and activities in a picture. We want to produce a free alternative.
Description: Rekognition is Amazon's (paid) service capable of identifying objects, text and activities, performing facial analysis and recognition, detecting the frequency of objects or an inappropriate scene, and much more using deep learning. Poor Man's Rekognition is an open-source version of the commercial service and is currently able to do almost everything that Amazon Rekognition does.</description></item><item><title>Poor Man's Textract</title><link>https://ccextractor.org/public/gsoc/poormantextract/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/poormantextract/</guid><description>Introduction
Amazon Textract a (paid) service that &amp;quot;automatically extracts text and data from scanned documents. Amazon Textract goes beyond simple optical character recognition (OCR) to also identify the contents of fields in forms and information stored in tables.&amp;quot;. We want to build a free alternative that provides an output of similar quality.
Your job
Improve upon the existing PMT project: https://github.com/kenAlparslan/Texttract
Previous (GCi) tasks that did something (albeit simpler) similar:</description></item><item><title>Port and/or rewrite CEA-608 support to Rust</title><link>https://ccextractor.org/public/gsoc/cc_rust_608/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/cc_rust_608/</guid><description>708 is the standard for analog TV in the US and a few other countries. Wait, don't go! It's upconverted so even if it's &amp;quot;old&amp;quot;, it's the minimum common denominator and present in all broadcasts.
Current status:
Complete implementation in C. May have bugs, but it's been used in production for ages. - Written early, meaning lots of things weren't clear then and the code is messy. - Suspected to have some security issues that Rust can help with.</description></item><item><title>Project Nephos</title><link>https://ccextractor.org/public/gsoc/2018/aaditya/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2018/aaditya/</guid><description>Developed under Google Summer of Code, 2018 with CCExtractorDevelopment By Aaditya MNair
Introduction One of the function of the RedHen Organisation is to record and archive Television streams they receive for future research. Project Nephos is an effort by CCExtractor to automate the entire process. Archiving is done by compressing and uploading to Google Drive. In addition to downloading and archiving, Project Nephos provides the following functionalities:
Tagging of videos.</description></item><item><title>Project Nephos</title><link>https://ccextractor.org/public/gsoc/2018/thealphadollar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2018/thealphadollar/</guid><description>Developed under Google Summer of Code, 2018 with CCExtractor Development By Shivam Kumar Jha
Introduction Project Nephos aims at simplifying the process of moving samples from local storage to cloud for Universities by automating, almost, all the steps involved. It consists of three independent modules; recording module, processing module, and uploading module.
The recording module is responsible for managing the addition of channel lists, set up of recording jobs and saving the recorded streams.</description></item><item><title>Python Extension Module (bindings) for CCExtractor</title><link>https://ccextractor.org/public/gsoc/2017/diptanshu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2017/diptanshu/</guid><description>Developed under Google Summer of Code, 2017 with CCExtractor Development By Diptanshu Jamgade
Introduction CCExtractor is a software written in C language. The main aim of this project was to generate the python extension module for CCExtractor which would then help Python developers to extend the applications of CCExtractor in Python.
The main ideology of the module was to extract the captions using CCExtractor and parse the extracted captions to Python for processing them.</description></item><item><title>Python extension module for CCExtractor</title><link>https://ccextractor.org/public/gsoc/python_extension_module_technical_documentation_gsoc_17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/python_extension_module_technical_documentation_gsoc_17/</guid><description>This is the main documentation of Python extension module for CCExtractor:
CCExtractor Library Refactoring the codebase into a library Earlier version of CCExtractor was compiled as a binary and could not be used as a library. The entire codebase was executed via a single main function defined in ccextractor.c and this architecture was not suitable for extending ccextractor source code to a library. Hence, many modifications were made to ccextractor.c so that conversion to a library could be done.</description></item><item><title>Real time repository and website</title><link>https://ccextractor.org/public/gsoc/2016/ruslan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2016/ruslan/</guid><description>The main goal of this year was to bring real-time repository to more stable, less resource demanding and usable version. A lot of decisions made in GSoC 2014 and 2015 turned out to be wrong. So this year I had to start everything almost from scratch. The things that were achieved to this date are:
Completely changed architecture: All captions extraction (BIN -&amp;gt; CC) is done on &amp;quot;tuners side&amp;quot; instead of sending BIN to special servers for extracting CCExtractor itself doesn't connect to repository servers, instead a client program ccr should be used.</description></item><item><title>Replace CCExtractor's GUI with a modern, Flutter based one.</title><link>https://ccextractor.org/public/gsoc/ccextractor_gui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/ccextractor_gui/</guid><description>We have a very old GUI, written in .NET no less, a very long time ago. When it was written, CCExtractor was quite simple, and all the options fit in a 1024x768 single page.
Now we have a large number of tabs that don't look good, the UI won't even adjust to screen size... well, it's rather bad :-)
Since then, there's been a few attempts to come up with something better (we have a simple UI integrated in CCExtractor itself, a Qt version, and more), but nothing has really reached the point of being better than the old one.</description></item><item><title>Rewrite the OCR subsystem in Rust.</title><link>https://ccextractor.org/public/gsoc/cc_rust_ocr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/cc_rust_ocr/</guid><description>This is NOT about rewriting the OCR library (tesseract) of course, but rather, the use with do of it.
Some subtitles (for example, DVB which is an European format) uses bitmaps rather than text to show subtitles. This is great in the sense that each TV channel can define its own font, style, use special characters and so on. But of course, it makes it impossible to directly generate a .</description></item><item><title>Roku reference channel(II)</title><link>https://ccextractor.org/public/gsoc/rokuchannel2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/rokuchannel2/</guid><description>Roku is currently the most common media streamer. It's cheap and neutral (it's not in any &amp;quot;fight&amp;quot;). Unfortunately, there aren't any good open source channels. We started working on one last year, but we didn't get to a status of &amp;quot;awesomeness&amp;quot;. We'd like to continue working on that.
We will send a free Roku to our student for development.
Below is the description from last year. Some things weren't complete. When you load the channel it doesn't have the polished view that other channels have (for example Netflix has a fantastic layout in which no screen is wasted).</description></item><item><title>Rotating capture system with HDHomeRun</title><link>https://ccextractor.org/public/general/rotating_capture_system_with_hdhomerun/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/rotating_capture_system_with_hdhomerun/</guid><description>This is Carlos' quick and dirty solution to have a grid with captions from all stations using a few tuners, obviously by rotating them to cover all channels.
File directories: /bin/ → Scripts /channels/ → Channels, each file being a channel. If name starts with a C then it's cable, if it's a B it's broadcast, anything else is ignored. /tuners/ → One file per tuner, with this naming $devicetype-$tunertype-$masterorregular-$deviceid-$tunernumber where $devicetype is always HDR (for now only HDHomeRun is supported) $tunertype is USC (US-cable) or USB (US-broadcast) $masterorregular is M or R, if M then this tuner will be used to scan for channels by the chanscan script that populates the /channels/ directory $deviceid is the device ID.</description></item><item><title>rutorrent mobile interface (II)</title><link>https://ccextractor.org/public/gsoc/flutterrutorrent2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/flutterrutorrent2/</guid><description>Introduction
rutorrent is the most popular web interface for rtorrent, which is possibly the most used BitTorrent client in linux. It is mostly a web application, but it has its own backend that connects to rtorrent. You could connect to rtorrent directly as well, but by doing that you would be missing lots of features that come with rutorrent, for example RSS support.
Yes, there are two things with almost the same name.</description></item><item><title>Sample submission platform / CCExtractor improvements</title><link>https://ccextractor.org/public/gsoc/2015/willem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2015/willem/</guid><description>Technical Documentation All technical documentation has been posted to the GitHub repositories, either in the form of the README, or in form of comments.
The repositories are located here:
https://github.com/canihavesomecoffee/ccx_testsuite (Project from GSoC 2014, not that much changes this year, except for some fixes and improvements) https://github.com/canihavesomecoffee/ccx_gitbot https://github.com/canihavesomecoffee/ccx_submissionplatform
How to use? Test Suite No changes from last year, still as described in the first section of CCExtractor regresssion testing / GitHub bot.</description></item><item><title>Search</title><link>https://ccextractor.org/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/search/</guid><description/></item><item><title>Season of Docs 2019</title><link>https://ccextractor.org/public/gsoc/ideas_page_for_season_of_docs_2019/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/ideas_page_for_season_of_docs_2019/</guid><description>This page is in constant development. We add things as we think of them. It's not exhaustive, and we're open to ideas brought by the technical writers as well.
CCExtractor Website Rework our website, which is based on dokuwiki. We're happy to switch to any other software that the technical writer is comfortable with. User documentation We have a help screen (which is also exported as a &amp;quot;man&amp;quot; page) that shows all the options, but it's just a list of parameters.</description></item><item><title>Season of Docs 2020</title><link>https://ccextractor.org/public/gsoc/ideas_page_for_season_of_docs_2020/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/ideas_page_for_season_of_docs_2020/</guid><description>General mission statement: To generate useful documentation that allows new developers to be productive as quickly as their own skills allow and users to use our software without going to several different places to find how to do even the most basic of the tasks.
Our commitment to technical writers: We will quickly provide any and all assistance you need and point you to the right people. We will trust you to make documentation decisions both in writing and in organization.</description></item><item><title>Sentiment Analysis / Realtime Translation with Google Translate/Apertium</title><link>https://ccextractor.org/public/gsoc/2015/nurendra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2015/nurendra/</guid><description>Projects Realtime Translation using Google Translate Realtime Translation using Apertium Web application to compare statistics of Stock Price, TV Mentions and Twitter Technical Documentation All the technical details are commented in the codes and the documentation is available in the Readme's of their directories. The variables, classes and other components of the code are named properly in Camel Case for easier understanding of the code.
Repositories:
https://github.com/Akirato/goslateTranslator - Google Translate Translator https://github.</description></item><item><title>Server Application Structure</title><link>https://ccextractor.org/public/gsoc/server_application_structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/server_application_structure/</guid><description>Files and Directories The most important directories and files in server application are:
./ server base path archive/ extracted cc files Year/Month/Day/ *.srt, *.txt, *.bin files' names match to ids in programs table in db bin/ executable files build/ object files generated during compilation server server app executable ccextractor config/ db.ini database configuration (user, password etc) server.ini server app configuration (port, logs etc) web.ini Web site configuration (not used) docs/ doxygen docs, readme images io/ files generated during runtime cce_input/ ccextractor input named pipes cce_output/ ccextractor output files web/ Web site buffer logs/ server app log files src/ server app sources tests/ test scripts and test client app web/ *.</description></item><item><title>Slack</title><link>https://ccextractor.org/public/general/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/support/</guid><description>Slack is a great communication tool. Most CCExtractor developers hang out in a slack team. You're welcome to request an invitation here, use token: subtitles
Technical issues By far the best way to get report issues is by opening a ticket at GitHub's issue tracker.
When creating a ticket:
Make sure you are using the last CCExtractor version. If it's a new thing (for example a video file that a previous CCExtractor version processed OK and now causes a crash) mention the last version you know was correct.</description></item><item><title>Standardize BitTorrent over TLS (SSL)</title><link>https://ccextractor.org/public/gsoc/bittorrent-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/bittorrent-tls/</guid><description>Introduction
BitTorrent protocol is not secure. Its RC4 encryption mechanism (MSE/PE) is outdated and weak. It provides no anonymity. It is (at best) an obfuscation, by current standards. Even for obfuscation, it is ineffective. As early as 2010, there are efficient, reliable and highly accurate methods to unmask and classify encrypted/obfuscated BitTorrent traffic [1][2]. Nowadays, even an entry-level gateway has the capability [3] to detect and block BitTorrent traffic at little to no risk.</description></item><item><title>Subtitle Extractor</title><link>https://ccextractor.org/public/gsoc/2016/abhishek/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2016/abhishek/projects/</guid><description>Details All the technical details are commented in the codes and the documentation is available in the Readme's of their directories. The variables, classes and other components of the code are named properly in Camel Case for easier understanding of the code.
Repositories:
https://github.com/abhishek-vinjamoori/SubtitleExtractor - Subtitle Extractor I am the only contributor to this repository. Started it from scratch.
How to use? The usage is listed in the README file of the GitHub repository and also in the USER DOCUMENTATION WIKI PAGE</description></item><item><title>Subtitle standards around the world</title><link>https://ccextractor.org/public/general/subtitle_standards_around_the_world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/subtitle_standards_around_the_world/</guid><description>(document produced by Code-In student Deborah Chan)
Countries under ATSC standards:
Old: CEA-608 New: CEA-708
Asia/Pacific:
South Korea United States Minor Outlying Islands (American Samoa, Guam, Northern Mariana Islands)
North America:
Bahamas Canada Dominican Republic El Salvador Mexico United States (including Puerto Rico and U.S. Virgin Islands)
South America: Suriname
Countries under DVB standards: EN 300-743 http://www.etsi.org/deliver/etsi_en/300700_300799/300743/01.05.01_60/en_300743v010501p.pdf
Africa: Kenya South Africa Madagascar
Asia: China Hong Kong Iran Israel Japan Malaysia Philippines Taiwan</description></item><item><title>Take-home qualification tasks</title><link>https://ccextractor.org/public/gsoc/takehome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/takehome/</guid><description>We know that working on existing codebases can be daunting, and you might end up working on a new project anyway, so this year we have some alternative qualification tasks (we'll add more soon, so come back).
You can still opt for the standard ones (such as fixing issues on GitHub) --- these are just alternatives that are available.
Interprocess communication (low-level) Language: Modern C (not C++). Must work in: Linux</description></item><item><title>The next peer-to-peer protocol</title><link>https://ccextractor.org/public/gsoc/cloudtorrent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/cloudtorrent/</guid><description>Introduction
BitTorrent is, of course, the world's most used peer to peer protocol. It's great, but it was designed before the cloud was ubiquitous and it doesn't make use of the places where you have the most storage or the most bandwidth. Can we design something for the next decade?
BitTorrent is based on the concept of peers, which are BitTorrent clients, usually running on computers at home, that share data is a super-efficient manner.</description></item><item><title>The sample platform / Continuous integration</title><link>https://ccextractor.org/public/gsoc/2018/satyam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2018/satyam/</guid><description>Developed under Google Summer of Code, 2018 with CCExtractor Development By Satyam Mittal
Introduction The CCExtractor Sample Platform manages a test suite bot, sample upload and more. This platform allows for a unified place to report errors, submit samples, view existing samples and more. The sample platform has been a good way to test regression tests, but still lacks some features such as running customized tests.
The main aim of the project is to make sample platform fully finalized and be as stable as possible.</description></item><item><title>Translating captions</title><link>https://ccextractor.org/public/gsoc/translating_captions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/translating_captions/</guid><description>You can use the cctranslate tool (implemented by Oleg) to translate extracted captions in realtime and in SubRip formatted files. We use the Google Translate API for translation, but the tool is built so developers can easily add other translation engines.
How realtime translation works? ccextractor starts with sharing service on ccextractor launches cctranslate process launched instance of cctranslate subscribes to ccextractors' messages ccextractor publishes extracted subtitles to all subscribers cctranslate requests translation from translation service and saves translated captions to an output file Ok, and what is a &amp;quot;sharing service&amp;quot;?</description></item><item><title>TV Samples</title><link>https://ccextractor.org/public/general/tvsamples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/tvsamples/</guid><description>We often get requests for samples from other developers and users. Our full collection is available to developers that need it (some of the samples were submitted by people who explicitly told us not to make them public, which we honor) However we're starting to build a small public repository for everyone who wants to test.
The following link contains 10 minutes recorded of over 30 US TV channels. They were made with a HDHomeRun on Dec 14, 2016.</description></item><item><title>Unassigned tasks</title><link>https://ccextractor.org/public/gsoc/ccextractor_unassigned_tasks_pick_what_like/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/ccextractor_unassigned_tasks_pick_what_like/</guid><description>Tasks here can be picked up by any student. Feel free to add them to your to-do list or if you like it better than something in your proposal you can replace. Please contact Carlos about it in any case.
Task Who Depends Planned dates Status Mentor notes GXF Support Unassigned Not started This is a request from a user; GXF is one of those professional formats (such as SCC) that we might never want to use personally but that would be really useful in the CC industry.</description></item><item><title>Useful Linu tools</title><link>https://ccextractor.org/public/general/misc/useful_linux_tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/misc/useful_linux_tools/</guid><description>Tmate - Instant terminal sharing</description></item><item><title>User Documentation for Activity Extractor</title><link>https://ccextractor.org/public/codein/activity_extractor_user_docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/codein/activity_extractor_user_docs/</guid><description>Activity Extractor aims to extract and download viewing activity from popular video streaming services including: Netflix, Hulu and Amazon. This process is automated and needs very little user interaction. It can be called from the command line with the streaming service as a parameter, and it outputs the viewing activity into a simple .txt file.
The program requires the user to have a valid login and password for the streaming service they wish to retrieve viewing activity from.</description></item><item><title>User Documentation for Subtitle Downloader</title><link>https://ccextractor.org/public/gsoc/2016/abishek/subtitle_downloader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/gsoc/2016/abishek/subtitle_downloader/</guid><description>Introduction The project deals with downloading of subtitles from popular online TV Services like Netflix, BBC,Hulu. The project aims to perform this task without the need for the user to interact with the browser. The process is automated completely. The user just needs to input the URL of the video and the application will download the subtitles. For services like YouTube, CrunchyRoll which have subtitles in multiple languages, the user gets an option to choose the preferred language.</description></item><item><title>Vim</title><link>https://ccextractor.org/public/general/misc/vim/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/misc/vim/</guid><description>Using Vim as your main editor for web development</description></item><item><title>Welcome to Google Code-In 2018 and CCExtractor!</title><link>https://ccextractor.org/public/codein/google_code-in_2018/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/codein/google_code-in_2018/</guid><description>Questions? You can email us at code-in@ccextractor.org or join our Slack group! But please make sure you read the whole page first.
This is going to be another absolutely amazing GCI year! We have a long and proud history of taking part in the Google Summer of Code with university students, and are excited to participate in GCI again for 3rd year with pre-university students! We have tasks that are: fun, useful, educational.</description></item><item><title>What does SPUPNG mean?</title><link>https://ccextractor.org/public/general/using_spupng/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/using_spupng/</guid><description>SPUPNG is two acronyms:
SPU
Sub-Picture Unit. According to wikibooks.org: &amp;quot;Subpictures are used to display subtitles as well as menu buttons, overlaid on the video. These are stored in an MPEG stream (private stream 1) as a sequence of Sub-Picture Units (SPUs).&amp;quot;
PNG
Portable Network Graphics. According to libpng.org: &amp;quot;An Open, Extensible Image Format with Lossless Compression.&amp;quot;
Why SPUPNG?
The SPUPNG format is intended for use with authoring DVDs. The SPUPNG format does a better job of preserving the original closed caption format than the text based formats supported by ccextractor.</description></item><item><title>Windows GUI usage</title><link>https://ccextractor.org/public/general/win_gui_usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/win_gui_usage/</guid><description>The new interface is all you need, as it includes all the options. After installing CCExtractor you will have a shortcut in your desktop and a new entry in the Program Files folder (CCExtractor → CCExtractorGUI).
From the GUI you have a lot of options. Usually, you will never need to use them (and if you do, you can save them as default) for regular usage.
There are several tabs. These are two that you will definitely need to use: The 'input files' tab, where you drag and drop (from Windows Explorer for example) the files you want to process, and the 'Execution' tab from where you launch the extraction process and see the progress.</description></item><item><title>Working with HDHomeRun</title><link>https://ccextractor.org/public/general/working_with_hdhomerun/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ccextractor.org/public/general/working_with_hdhomerun/</guid><description>Starting in version 0.65, CCExtractor can process a stream being delivered via UDP, so there's no need to capture video to a file in order to get the subtitles.
What devices are supported?
While it should work with any device that is able to send the stream via UDP, at this time it's only been tested with HDHomeRun (both European and American models).
Will other devices be supported?
HDHomeRun works so well that it's unlikely I'll bother with any other device unless it finds its way to me for free and development is sponsored.</description></item></channel></rss>